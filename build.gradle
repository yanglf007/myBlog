buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
		springCloudVersion = 'Finchley.SR2'
	}
	repositories {
		maven {url 'http://maven.aliyun.com/nexus/content/groups/public/'}
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.yanglf'
version = '0.0.2'
sourceCompatibility = 1.8
configurations {
	mybatisGenerator
}
repositories {
	mavenCentral()
}


dependencies {
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
	compile group: 'com.google.guava', name: 'guava', version: '25.1-jre'
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-cache')
// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-aop
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '2.0.3.RELEASE'
	compile group: 'org.springframework.boot', name: 'spring-boot-devtools'

	// 添加   Thymeleaf Spring Security 依赖，与 Thymeleaf 版本一致都是 3.x
	compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.2.RELEASE')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	compile group: 'com.googlecode.log4jdbc', name: 'log4jdbc', version: '1.2'
	compile group: 'log4j', name: 'log4j', version: '1.2.17'
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

	// https://mvnrepository.com/artifact/com.github.rjeschke/txtmark
	compile group: 'com.github.rjeschke', name: 'txtmark', version: '0.13'
	// https://mvnrepository.com/artifact/commons-net/commons-net
	compile group: 'commons-net', name: 'commons-net', version: '3.6'
// https://mvnrepository.com/artifact/net.coobird/thumbnailator 图片压缩
	compile group: 'net.coobird', name: 'thumbnailator', version: '0.4.8'

/*
	// https://mvnrepository.com/artifact/net.sf.json-lib/json-lib
	compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4',classifier: "jdk15"
*/

	compile('net.sf.json-lib:json-lib:2.4:jdk15')
	// https://mvnrepository.com/artifact/redis.clients/jedis
	compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
// https://mvnrepository.com/artifact/commons-io/commons-io
	compile group: 'commons-io', name: 'commons-io', version: '2.4'

// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
	mybatisGenerator 'tk.mybatis:mapper:3.3.9'
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
	mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
// https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter
	compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '1.3.2'

	// https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter
	compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: '1.2.5'
	implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')


	compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-feign', version: '1.4.6.RELEASE'

}

def getDbProperties = {
	def properties = new Properties()
	file("src/main/resources/jdbc.properties").withInputStream { inputStream ->
		properties.load(inputStream)
	}
	properties
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

task mybatisGenerate << {
	def properties = getDbProperties()
	ant.properties['targetProject'] = projectDir.path
	ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
	ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
	ant.properties['userId'] = properties.getProperty("jdbc.username")
	ant.properties['password'] = properties.getProperty("jdbc.password")
	ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
	ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
	ant.properties['modelPackage'] = properties.getProperty("package.model")
	ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
	ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
	ant.taskdef(
			name: 'mbgenerator',
			classname: 'org.mybatis.generator.ant.GeneratorAntTask',
			classpath: configurations.mybatisGenerator.asPath
	)
	ant.mbgenerator(overwrite: true,
			configfile: 'src/main/resources/tools/generatorConfig.xml', verbose: true) {
		propertyset {
			propertyref(name: 'targetProject')
			propertyref(name: 'userId')
			propertyref(name: 'driverClass')
			propertyref(name: 'connectionURL')
			propertyref(name: 'password')
			propertyref(name: 'src_main_java')
			propertyref(name: 'src_main_resources')
			propertyref(name: 'modelPackage')
			propertyref(name: 'mapperPackage')
			propertyref(name: 'sqlMapperPackage')
		}
	}
}